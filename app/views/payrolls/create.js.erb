App = {
  web3Provider: null,
  contracts: {},
  currentAdminAccount: '',

  init: function() {
    console.log('init')
    return App.initWeb3();
  },

  initWeb3: function() {
    console.log('initWeb3')
    // Initialize web3 and set the provider to the testRPC.
    if (typeof web3 !== 'undefined') {
      console.log('currentProvider')
      App.web3Provider = web3.currentProvider;
      web3 = new Web3(web3.currentProvider);
    } else {
      // set the provider you want from Web3.providers
      App.web3Provider = new Web3.providers.HttpProvider('http://127.0.0.1:7545');
      web3 = new Web3(App.web3Provider);
    }

    return App.setAccount();
  },
  setAccount: function() {
    console.log('setAccount')
    console.log(web3.eth)

    App.currentAdminAccount = web3.eth.accounts[0]
  },
};

// function submitForm() {
//   event.preventDefault()
//   await(sendTransactions())
//     console.log('hi')
//     // this.submit()
//   })  
// }

async function submitForm() {
  try {
    let ready = await sendTransactions()
  } catch(e) {
    console.log(e)
  }
}

async function sendTransactions() {
  const transactionCount = parseInt(<%= @transactions.count %>)
  <% @transactions.each_with_index do |transaction, index| %>
    var from = '<%= transaction.from_address %>'
    var receiver = '<%= transaction.to_address %>'
    var amount = '<%= transaction.amount %>'

    web3.eth.sendTransaction({
      from: App.currentAdminAccount,
      to: receiver,
      value: web3.toWei(amount, "ether")
    }, function (error, result) {
      // TODO make this robust
      let last = parseInt(<%= index %>) == 0 ? true : false

      updateTransaction('<%= transaction.id %>', result, last)
    });
  <% end %>
};

async function updateTransaction(id, result, last) {
  try {
    let response = await $.ajax('/companies/<%= @company.id %>/payrolls/<%= @payroll.id %>/transactions/' + id, {
      type: 'PUT',
      headers: {
        // 'Accept': 'application/json',
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector("meta[name=csrf-token]").content
      },
      data: JSON.stringify({
        "asdf": result,
        "transaction": {
          "actual_from_address": App.currentAdminAccount,
          "result_hash": result
        }
      })
    });

    if(last) {
      window.location.href ='<%= company_payroll_path(@company, @payroll) %>'
    }
  } catch (error) {
    console.error(error);
  }
}

$(document).ready(function() {
  App.init();
  submitForm();
});
